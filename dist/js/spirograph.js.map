{"version":3,"sources":["../../src/js/spirograph.jsx"],"names":["Spirograph","props","innerCircleSizePercentage","outerRadiusInPixels","getOuterRadiusInPixels","canvas","width","setState","ctx","getContext","findDOMNode","refs","spiroCanvas","updateCanvasSize","height","console","log","state","innerRadiusInPixels","theta","max","getMaxLoops","interval","setInterval","nextLine","counter","onComplete","pointFromCenterInPixels","val1","val2","x","Math","cos","y","sin","moveTo","lineTo","clearInterval","lineThickness","lineColor","lineTransparency","speed","beginPath","lineWidth","strokeStyle","r","g","b","i","PI","batchedLineTo","stroke","Component"],"mappings":"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","file":"spirograph.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { observer } from 'mobx-react';\r\nimport _ from 'lodash';\r\nimport utils from './utils';\r\n\r\n\r\nclass Spirograph extends React.Component {\r\n\r\n\tconstructor (props) {\r\n\t\tsuper(props);\r\n\t}\r\n\r\n\tcomponentDidMount () {\r\n\t\tconst { innerCircleSizePercentage } = this.props;\r\n\t\tconst outerRadiusInPixels = utils.getOuterRadiusInPixels(canvas.width);\r\n\r\n\t\tthis.setState = {\r\n\t\t\tcanvas: canvas,\r\n\t\t\tctx: canvas.getContext('2d'),\r\n\t\t\t// innerRadiusInPixels: utils.getInnerRadiusInPixels(outerRadiusInPixels, innerCircleSizePercentage),\r\n\t\t\t// outerRadiusInPixels: outerRadiusInPixels,\r\n\t\t};\r\n\t\t\r\n//\t\tthis.draw();\r\n\t}\r\n\r\n\t// when the component is mounted or the screen is resized, we need to recompute the width of the canvas area HERE. \r\n\t// That updates the information in the panel store.\r\n\tupdateDimensions() {\r\n\t\tconst canvas = ReactDOM.findDOMNode(this.refs.spiroCanvas);\r\n\r\n\t\tthis.props.updateCanvasSize({ \r\n\t\t\twidth: canvas.width,\r\n\t\t\theight: canvas.height\r\n\t\t});\r\n\t}\r\n\r\n\tshouldComponentUpdate() {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tdraw () {\r\n\t\tconsole.log('state in draw(): ', this.state);\r\n\r\n\t\tconst { innerRadiusInPixels, outerRadiusInPixels } = this.state;\r\n\t\tthis.theta = 0;\r\n\t\tthis.max = utils.getMaxLoops(innerRadiusInPixels, outerRadiusInPixels); // figure out when we need to stop looping\r\n\r\n\t\tconsole.log(this.max);\r\n\t\treturn;\r\n\r\n\t\tthis.interval = setInterval(() => {\r\n\t\t\tthis.nextLine();\r\n\t\t\tcounter++;\r\n\r\n\t\t\tif (counter > 100) {\r\n\t\t\t\tconsole.log('fake complete');\r\n\t\t\t\tonComplete();\r\n\t\t\t}\r\n\r\n\t\t}, 30);\r\n\t}\r\n\r\n\tbatchedLineTo () {\r\n\t\tconst { outerRadiusInPixels, innerRadiusInPixels, pointFromCenterInPixels } = this.props;\r\n\t\tlet val1 = this.theta * (1 - outerRadiusInPixels / innerRadiusInPixels);\r\n\t\tlet val2 = innerRadiusInPixels - outerRadiusInPixels;\r\n\t\tlet x = Math.cos(this.theta) * val2 + pointFromCenterInPixels * Math.cos(val1);\r\n\t\tlet y = Math.sin(this.theta) * val2 + pointFromCenterInPixels * Math.sin(val1);\r\n\t\tthis.ctx.moveTo(x, y);\r\n\r\n\t\tthis.theta += 0.01;\r\n\t\tval1 = this.theta * (1 - outerRadiusInPixels / innerRadiusInPixels);\r\n\t\tval2 = innerRadiusInPixels - outerRadiusInPixels;\r\n\t\tx = Math.cos(this.theta) * val2 + pointFromCenterInPixels * Math.cos(val1);\r\n\t\ty = Math.sin(this.theta) * val2 + pointFromCenterInPixels * Math.sin(val1);\r\n\t\tthis.ctx.lineTo(x, y);\r\n\t}\r\n\r\n\tonComplete () {\r\n\t\tclearInterval(this.interval);\r\n\t}\r\n\r\n\tnextLine () {\r\n\t\tconst { lineThickness, lineColor, lineTransparency, speed } = this.props;\r\n\r\n\t\tthis.ctx.beginPath();\r\n\t\tthis.ctx.lineWidth = lineThickness;\r\n\t\tthis.ctx.strokeStyle = `rgba(${lineColor.r}, ${lineColor.g}, ${lineColor.b}, ${lineTransparency})`;\r\n\r\n\t\tfor (var i=0; i<speed; i++) {\r\n\t\t\tif (this.theta / Math.PI / 2 > this.max) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tthis.batchedLineTo();\r\n\t\t}\r\n\t\tthis.ctx.stroke();\r\n\r\n\t\tif (this.theta / (Math.PI * 2) > this.max) {\r\n\t\t\tthis.onComplete();\r\n\t\t}\r\n\t}\r\n\r\n    render () {\r\n        return (\r\n            <canvas className=\"spiroCanvas\" ref=\"spiroCanvas\"></canvas>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Spirograph;\r\n"]}