{"version":3,"sources":["../../../src/js/components/spirograph.jsx"],"names":["Spirograph","props","updateCanvasSize","bind","canvas","findDOMNode","refs","spiroCanvas","width","height","nextProps","isDrawing","draw","console","log","theta","ctx","getContext","interval","setInterval","nextLine","outerRadiusInPixels","innerRadiusInPixels","pointFromCenterInPixels","val1","val2","x","Math","cos","y","sin","moveTo","lineTo","clearInterval","lineThickness","lineColor","lineTransparency","speed","maxLoops","beginPath","lineWidth","strokeStyle","r","g","b","i","PI","batchedLineTo","stroke","onComplete","Component"],"mappings":"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","file":"spirograph.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { observer } from 'mobx-react';\r\nimport _ from 'lodash';\r\nimport utils from '../core/utils';\r\n\r\n\r\nclass Spirograph extends React.Component {\r\n\r\n\tconstructor (props) {\r\n\t\tsuper(props);\r\n\t\tthis.updateCanvasSize = this.updateCanvasSize.bind(this);\r\n\t}\r\n\r\n\tcomponentDidMount () {\r\n\t\tthis.updateCanvasSize();\r\n\t}\r\n\r\n\t// when the component is mounted or the screen is resized, we need to recompute the width of the canvas area HERE. \r\n\t// That updates the information in the panel store.\r\n\tupdateCanvasSize() {\r\n\t\tconst canvas = ReactDOM.findDOMNode(this.refs.spiroCanvas);\r\n\t\tthis.props.updateCanvasSize({ \r\n\t\t\twidth: canvas.width,\r\n\t\t\theight: canvas.height\r\n\t\t});\r\n\t}\r\n\r\n\tshouldComponentUpdate(nextProps) {\r\n\t\tif (nextProps.isDrawing && !this.props.isDrawing) {\r\n\t\t\tthis.draw();\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tdraw () {\r\n\t\tconsole.log(this.props);\r\n\r\n\t\t// meh... there's no WAY I'm storing references to this component's DOM content in the sodding store...\r\n\t\tthis.theta = 0;\r\n\t\tthis.canvas = ReactDOM.findDOMNode(this.refs.spiroCanvas);\r\n\t\tthis.ctx = this.canvas.getContext('2d');\r\n\r\n\t\tthis.interval = setInterval(() => {\r\n\t\t\tthis.nextLine();\r\n\t\t}, 30);\r\n\t}\r\n\r\n\tbatchedLineTo () {\r\n\t\tconst { outerRadiusInPixels, innerRadiusInPixels, pointFromCenterInPixels } = this.props;\r\n\t\tlet val1 = this.theta * (1 - outerRadiusInPixels / innerRadiusInPixels);\r\n\t\tlet val2 = innerRadiusInPixels - outerRadiusInPixels;\r\n\t\tlet x = Math.cos(this.theta) * val2 + pointFromCenterInPixels * Math.cos(val1);\r\n\t\tlet y = Math.sin(this.theta) * val2 + pointFromCenterInPixels * Math.sin(val1);\r\n\t\tthis.ctx.moveTo(x, y);\r\n\r\n\t\tthis.theta += 0.01;\r\n\t\tval1 = this.theta * (1 - outerRadiusInPixels / innerRadiusInPixels);\r\n\t\tval2 = innerRadiusInPixels - outerRadiusInPixels;\r\n\t\tx = Math.cos(this.theta) * val2 + pointFromCenterInPixels * Math.cos(val1);\r\n\t\ty = Math.sin(this.theta) * val2 + pointFromCenterInPixels * Math.sin(val1);\r\n\t\tthis.ctx.lineTo(x, y);\r\n\t}\r\n\r\n\tonComplete () {\r\n\t\tclearInterval(this.interval);\r\n\t}\r\n\r\n\tnextLine () {\r\n\t\tconst { lineThickness, lineColor, lineTransparency, speed, maxLoops } = this.props;\r\n\r\n\t\tthis.ctx.beginPath();\r\n\t\tthis.ctx.lineWidth = lineThickness;\r\n\t\tthis.ctx.strokeStyle = `rgba(${lineColor.r}, ${lineColor.g}, ${lineColor.b}, ${lineTransparency})`;\r\n\r\n\t\tfor (var i=0; i<speed; i++) {\r\n\t\t\tif (this.theta / Math.PI / 2 > maxLoops) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tthis.batchedLineTo();\r\n\t\t}\r\n\t\tthis.ctx.stroke();\r\n\r\n\t\tif (this.theta / (Math.PI * 2) > maxLoops) {\r\n\t\t\tconsole.log('complete.')\r\n\t\t\tthis.onComplete();\r\n\t\t}\r\n\t}\r\n\r\n    render () {\r\n        return (\r\n            <canvas className=\"spiroCanvas\" ref=\"spiroCanvas\"></canvas>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Spirograph;\r\n"]}