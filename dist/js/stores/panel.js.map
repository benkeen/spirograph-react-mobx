{"version":3,"sources":["../../../src/js/stores/panel.jsx"],"names":["Panel","bound","dimensions","canvasWidth","width","canvasHeight","height","isDrawing","tab","currTab","value","innerCircleSizePercentage","pointFromCenterPercentage","speed","px","parseInt","innerRadiusInPixels","console","log","outerRadiusInPixels","maxLoops","getGreatestCommonDivisor","store","params","id","v4","each","Object","keys","key","r","g","b"],"mappings":";;;;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAGMA,K,WAOJ,aAAOC,K,UAOP,aAAOA,K,UAGP,aAAOA,K;;;mCAVwBC,U,EAAY;AAC3C,QAAKC,WAAL,GAAmBD,WAAWE,KAA9B;AACA,QAAKC,YAAL,GAAoBH,WAAWI,MAA/B;AACA;;AAED;AAXW;;;;yBAaW;AACrB,QAAKC,SAAL,GAAiB,IAAjB;AACA;;;0BACsB;AACtB,QAAKA,SAAL,GAAiB,KAAjB;AACA;;AAED;;;;4BAEmBC,G,EAAK;AACvB,QAAKC,OAAL,GAAeD,GAAf;AACA;;AAED;;;;+CAEsCE,K,EAAO;AAC5C,QAAKC,yBAAL,GAAiCD,KAAjC;AACA;;;+CAEqCA,K,EAAO;AAC5C,QAAKE,yBAAL,GAAiCF,KAAjC;AACA;;;2BAQiBA,K,EAAO;AACxB,QAAKG,KAAL,GAAaH,KAAb;AACA;;;sBATwC;AACxC,OAAII,KAAKC,SAAU,KAAKC,mBAAL,GAA2B,GAA5B,GAAmC,KAAKJ,yBAAjD,EAA4E,EAA5E,CAAT;AACAK,WAAQC,GAAR,CAAYJ,EAAZ,EAAgB,KAAKE,mBAArB,EAA0C,KAAKJ,yBAA/C;AACA,UAAOE,EAAP;AACA;;;sBAeoC;AACpC,UAAQ,KAAKX,WAAL,GAAmB,CAApB,GAAyB,EAAhC;AACA;;;sBAEoC;AACpC,UAAOY,SAAU,KAAKI,mBAAL,GAA2B,GAA5B,GAAmC,KAAKR,yBAAjD,EAA4E,EAA5E,CAAP;AACA;;AAED;;;;sBAC0B;AACzB,OAAIS,WAAW,KAAKJ,mBAAL,GAA2B,gBAAMK,wBAAN,CAA+B,KAAKF,mBAApC,EAAyD,KAAKH,mBAA9D,CAA1C;AACA,UAAOI,QAAP;AACA;;AAED;;;;AACA,gBAAYE,KAAZ,EAAmBC,MAAnB,EAA2C;AAAA;;AAAA,MAAhBC,EAAgB,uEAAX,mBAAKC,EAAL,EAAW;;AAAA;;AAAA,OArE3CD,EAqE2C,GArEtC,IAqEsC;AAAA,OApE3CF,KAoE2C,GApEnC,IAoEmC;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAC1C,OAAKA,KAAL,GAAaA,KAAb;AACA,OAAKE,EAAL,GAAUA,EAAV;;AAEA,mBAAEE,IAAF,CAAOC,OAAOC,IAAP,CAAYL,MAAZ,CAAP,EAA4B,UAACM,GAAD,EAAS;AACpC,SAAKA,GAAL,IAAYN,OAAOM,GAAP,CAAZ;AACA,GAFD;AAGA;;;;;;SAzEyB,C;;;;;SACC,C;;;;;SAQH,K;;;;;SASF,E;;;;;SAMkB,E;;;;;SAIA,E;;;;;SAUpB,G;;;;;SAIQ,C;;;;;SACG,G;;;;;SACJ,S;;;;;SACH;AACvBC,MAAG,EADoB;AAEvBC,MAAG,GAFoB;AAGvBC,MAAG;AAHoB,G;;;kBA+BVhC,K","file":"panel.js","sourcesContent":["import { observable, action, computed } from 'mobx';\nimport uuid from 'node-uuid';\nimport _ from 'lodash';\nimport utils from '../core/utils';\n\n\nclass Panel {\n\tid = null; // immutable\n\tstore = null;\n\n\t@observable canvasWidth = 0;\n\t@observable canvasHeight = 0;\n\n\t@action.bound updateCanvasSize (dimensions) {\n\t\tthis.canvasWidth = dimensions.width;\n\t\tthis.canvasHeight = dimensions.height;\n\t}\n\n\t// drawing state\n\t@observable isDrawing = false;\n\t@action.bound draw () {\n\t\tthis.isDrawing = true;\n\t}\n\t@action.bound pause () {\n\t\tthis.isDrawing = false;\n\t}\n\n\t// UI state\n\t@observable currTab = '';\n\t@action selectTab (tab) {\n\t\tthis.currTab = tab;\n\t}\n\n\t// settings\n\t@observable innerCircleSizePercentage = 50;\n\t@action setInnerCircleSizePercentage (value) {\n\t\tthis.innerCircleSizePercentage = value;\n\t}\n\t@observable pointFromCenterPercentage = 50;\n\t@action setPointFromCenterPercentage (value) {\n\t\tthis.pointFromCenterPercentage = value;\n\t}\n\t@computed get pointFromCenterInPixels () {\n\t\tlet px = parseInt((this.innerRadiusInPixels / 100) * this.pointFromCenterPercentage, 10);\n\t\tconsole.log(px, this.innerRadiusInPixels, this.pointFromCenterPercentage);\n\t\treturn px;\n\t}\n\n\t@observable speed = 150;\n\t@action setSpeed (value) {\n\t\tthis.speed = value;\n\t}    \n\t@observable lineThickness = 1;\n\t@observable lineTransparency = 0.5;\n\t@observable lineColorHex = '#0044cc';\n\t@observable lineColor = {\n\t\tr: 50,\n\t\tg: 150,\n\t\tb: 255\n\t};\n\n\t@computed get outerRadiusInPixels () {\n\t\treturn (this.canvasWidth / 2) - 20;\n\t}\n\n\t@computed get innerRadiusInPixels () {\n\t\treturn parseInt((this.outerRadiusInPixels / 100) * this.innerCircleSizePercentage, 10);\n\t}\n\n\t// exceedingly crumby way of determining when we need to stop the spirograph\n\t@computed get maxLoops () {\n\t\tlet maxLoops = this.innerRadiusInPixels / utils.getGreatestCommonDivisor(this.outerRadiusInPixels, this.innerRadiusInPixels);\n\t\treturn maxLoops;\n\t}\n\n\t// our constructor\n\tconstructor(store, params, id = uuid.v4()) {\n\t\tthis.store = store;\n\t\tthis.id = id;\n\n\t\t_.each(Object.keys(params), (key) => {\n\t\t\tthis[key] = params[key];\n\t\t});\n\t}\n}\n\nexport default Panel;"]}