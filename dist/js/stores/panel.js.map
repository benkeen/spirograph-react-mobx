{"version":3,"sources":["../../../src/js/stores/panel.jsx"],"names":["Panel","bound","dimensions","canvasWidth","width","canvasHeight","height","isDrawing","tab","currTab","value","innerCircleSizePercentage","pointFromCenterPercentage","speed","parseInt","outerRadiusInPixels","console","log","innerRadiusInPixels","getGreatestCommonDivisor","store","params","id","v4","each","Object","keys","key","r","g","b"],"mappings":";;;;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAGMA,K,WAOD,aAAOC,K,UAOP,aAAOA,K,UAGP,aAAOA,K;;;yCAVwBC,U,EAAY;AACxC,iBAAKC,WAAL,GAAmBD,WAAWE,KAA9B;AACA,iBAAKC,YAAL,GAAoBH,WAAWI,MAA/B;AACH;;AAED;AAXW;;;;+BAaW;AAClB,iBAAKC,SAAL,GAAiB,IAAjB;AACH;;;gCACsB;AACnB,iBAAKA,SAAL,GAAiB,KAAjB;AACH;;AAED;;;;kCAEmBC,G,EAAK;AACpB,iBAAKC,OAAL,GAAeD,GAAf;AACH;;AAED;;;;qDAEsCE,K,EAAO;AACzC,iBAAKC,yBAAL,GAAiCD,KAAjC;AACH;;;qDAEqCA,K,EAAO;AACzC,iBAAKE,yBAAL,GAAiCF,KAAjC;AACH;;;iCAEiBA,K,EAAO;AACrB,iBAAKG,KAAL,GAAaH,KAAb;AACH;;;4BAUoC;AACjC,mBAAQ,KAAKP,WAAL,GAAmB,CAApB,GAAyB,EAAhC;AACH;;;4BAEoC;AACjC,mBAAOW,SAAU,KAAKC,mBAAL,GAA2B,GAA5B,GAAmC,KAAKJ,yBAAjD,EAA4E,EAA5E,CAAP;AACH;;AAED;;;;4BAC0B;AACtBK,oBAAQC,GAAR,CAAY,KAAKC,mBAAjB,EAAsC,KAAKH,mBAA3C;AACA,mBAAO,KAAKG,mBAAL,GAA2B,gBAAMC,wBAAN,CAA+B,KAAKJ,mBAApC,EAAyD,KAAKG,mBAA9D,CAAlC;AACH;;AAED;;AAEA;;;;AACA,mBAAYE,KAAZ,EAAmBC,MAAnB,EAA2C;AAAA;;AAAA,YAAhBC,EAAgB,uEAAX,mBAAKC,EAAL,EAAW;;AAAA;;AAAA,aAjE3CD,EAiE2C,GAjEtC,IAiEsC;AAAA,aAhE3CF,KAgE2C,GAhEnC,IAgEmC;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACvC,aAAKA,KAAL,GAAaA,KAAb;AACA,aAAKE,EAAL,GAAUA,EAAV;;AAEA,yBAAEE,IAAF,CAAOC,OAAOC,IAAP,CAAYL,MAAZ,CAAP,EAA4B,UAACM,GAAD,EAAS;AACjC,kBAAKA,GAAL,IAAYN,OAAOM,GAAP,CAAZ;AACH,SAFD;AAGH;;;;;;eArEyB,C;;;;;eACC,C;;;;;eAQH,K;;;;;eASF,E;;;;;eAMkB,E;;;;;eAIA,E;;;;;eAIpB,G;;;;;eAIQ,C;;;;;eACG,G;;;;;eACJ,S;;;;;eACH;AACpBC,eAAG,EADiB;AAEpBC,eAAG,GAFiB;AAGpBC,eAAG;AAHiB,S;;;kBAiCb9B,K","file":"panel.js","sourcesContent":["import { observable, action, computed } from 'mobx';\nimport uuid from 'node-uuid';\nimport _ from 'lodash';\nimport utils from '../core/utils';\n\n\nclass Panel {\n    id = null; // immutable\n    store = null;\n\n    @observable canvasWidth = 0;\n    @observable canvasHeight = 0;\n\n    @action.bound updateCanvasSize (dimensions) {\n        this.canvasWidth = dimensions.width;\n        this.canvasHeight = dimensions.height;\n    }\n\n    // drawing state\n    @observable isDrawing = false;\n    @action.bound draw () {\n        this.isDrawing = true;\n    }\n    @action.bound pause () {\n        this.isDrawing = false;\n    }\n\n    // UI state\n    @observable currTab = '';\n    @action selectTab (tab) {\n        this.currTab = tab;\n    }\n\n    // settings\n    @observable innerCircleSizePercentage = 50;\n    @action setInnerCircleSizePercentage (value) {\n        this.innerCircleSizePercentage = value;\n    }\n    @observable pointFromCenterPercentage = 50;\n    @action setPointFromCenterPercentage (value) {\n        this.pointFromCenterPercentage = value;\n    }\n    @observable speed = 150;\n    @action setSpeed (value) {\n        this.speed = value;\n    }    \n    @observable lineThickness = 1;\n    @observable lineTransparency = 0.5;\n    @observable lineColorHex = '#0044cc';\n    @observable lineColor = {\n        r: 50,\n        g: 150,\n        b: 255\n    };\n\n    @computed get outerRadiusInPixels () {\n        return (this.canvasWidth / 2) - 20;\n    }\n\n    @computed get innerRadiusInPixels () {\n        return parseInt((this.outerRadiusInPixels / 100) * this.innerCircleSizePercentage, 10);\n    }\n\n    // exceedingly crumby way of determining when we need to stop the spirograph\n    @computed get maxLoops () {\n        console.log(this.innerRadiusInPixels, this.outerRadiusInPixels);\n        return this.innerRadiusInPixels / utils.getGreatestCommonDivisor(this.outerRadiusInPixels, this.innerRadiusInPixels);\n    }\n\n    // @observable pointFromCenterInPixels = null;\n\n    // our constructor\n    constructor(store, params, id = uuid.v4()) {\n        this.store = store;\n        this.id = id;\n\n        _.each(Object.keys(params), (key) => {\n            this[key] = params[key];\n        });\n    }\n}\n\nexport default Panel;"]}