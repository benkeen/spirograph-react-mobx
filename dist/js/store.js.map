{"version":3,"sources":["../../src/js/store.jsx"],"names":["UIStateStore","$","window","resize","updateWindowDimensions","params","panels","push","Panel","panelID","console","log","isDrawing","tab","currTab","value","innerCircleSizePercentage","pointFromCenterPercentage","speed","store","id","v4","each","Object","keys","key","r","g","b","computed"],"mappings":";;;;;;;;;AAEA;;;AAFA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,qBAAU,IAAV;;IAIMA,Y;;AAGF;AACA,4BAAc;AAAA;;AAAA;;AAAA;;AACVC,UAAEC,MAAF,EAAUC,MAAV,CAAiB,YAAM;AACnB,kBAAKC,sBAAL;AACH,SAFD;AAGH;;;;iCAEiBC,M,EAAQ;AACtB,iBAAKC,MAAL,CAAYC,IAAZ,CAAiB,IAAIC,KAAJ,CAAU,IAAV,EAAgBH,MAAhB,CAAjB;AACH;;;oCAEoBI,O,EAAS;AAC1BC,oBAAQC,GAAR,CAAYF,OAAZ;AACA;AACH;;AAED;;;;kCACmB,CAElB;;;;;;;eArBoB,E;;;IAyBnBD,K;;;+BAKc;AACZ,iBAAKI,SAAL,GAAiB,IAAjB;AACH,S,CANU;;AAEX;;;;gCAKiB;AACb,iBAAKA,SAAL,GAAiB,KAAjB;AACH;;AAGD;;;;kCAEmBC,G,EAAK;AACpB,iBAAKC,OAAL,GAAeD,GAAf;AACH;;AAED;;;;qDAEsCE,K,EAAO;AACzC,iBAAKC,yBAAL,GAAiCD,KAAjC;AACH;;;qDAEqCA,K,EAAO;AACzC,iBAAKE,yBAAL,GAAiCF,KAAjC;AACH;;;iCAEiBA,K,EAAO;AACrB,iBAAKG,KAAL,GAAaH,KAAb;AACH;;;;;AAUD;4BACqC;AAClC;AACF;;;AAMD;AACA,mBAAYI,KAAZ,EAAmBd,MAAnB,EAA2C;AAAA;;AAAA,YAAhBe,EAAgB,uEAAX,mBAAKC,EAAL,EAAW;;AAAA;;AAAA,aAlD3CD,EAkD2C,GAlDtC,IAkDsC;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACvC,aAAKD,KAAL,GAAaA,KAAb;AACA,aAAKC,EAAL,GAAUA,EAAV;;AAEA,yBAAEE,IAAF,CAAOC,OAAOC,IAAP,CAAYnB,MAAZ,CAAP,EAA4B,UAACoB,GAAD,EAAS;AACjC,mBAAKA,GAAL,IAAYpB,OAAOoB,GAAP,CAAZ;AACH,SAFD;AAGH;;;;;;eAtDuB,K;;;;;eAOE,C;;;;;eAGJ,E;;;;;eAMkB,E;;;;;eAIA,E;;;;;eAIpB,G;;;;;eAIQ,C;;;;;eACG,G;;;;;eACJ,S;;;;;eACH;AACpBC,eAAG,EADiB;AAEpBC,eAAG,GAFiB;AAGpBC,eAAG;AAHiB,S;;yEAOvBC,Q;;;eAIiC,I;;;;;eACI,I;;;;AAe1C;;kBACe,IAAI7B,YAAJ,E","file":"store.js","sourcesContent":["import { observable, action, useStrict } from 'mobx';\r\nimport uuid from 'node-uuid';\r\n//import $ from 'jquery';\r\nimport _ from 'lodash';\r\n\r\nuseStrict(true);\r\n\r\n\r\n\r\nclass UIStateStore {\r\n    @observable panels = [];\r\n\r\n    // a lot of the computation of the spirographs need to know the height\r\n    constructor() {\r\n        $(window).resize(() => {\r\n            this.updateWindowDimensions();\r\n        });\r\n    }\r\n\r\n    @action addPanel (params) {\r\n        this.panels.push(new Panel(this, params));\r\n    }\r\n\r\n    @action removePanel (panelID) {\r\n        console.log(panelID);\r\n        //this.panels.splice(this.panels.indexOf(panel), 1);\r\n    }\r\n\r\n    // this'll presumably call an action on all panels?\r\n    @action drawAll () {\r\n\r\n    }\r\n}\r\n\r\n\r\nclass Panel {\r\n    id = null; // immutable\r\n\r\n    // drawing state\r\n    @observable isDrawing = false;\r\n    @action draw () {\r\n        this.isDrawing = true;\r\n    }\r\n    @action pause () {\r\n        this.isDrawing = false;\r\n    }\r\n    @observable renderCount = 0;\r\n\r\n    // UI state\r\n    @observable currTab = '';\r\n    @action selectTab (tab) {\r\n        this.currTab = tab;\r\n    }\r\n\r\n    // settings\r\n    @observable innerCircleSizePercentage = 50;\r\n    @action setInnerCircleSizePercentage (value) {\r\n        this.innerCircleSizePercentage = value;\r\n    }\r\n    @observable pointFromCenterPercentage = 50;\r\n    @action setPointFromCenterPercentage (value) {\r\n        this.pointFromCenterPercentage = value;\r\n    }\r\n    @observable speed = 150;\r\n    @action setSpeed (value) {\r\n        this.speed = value;\r\n    }\r\n    @observable lineThickness = 1;\r\n    @observable lineTransparency = 0.5;\r\n    @observable lineColorHex = '#0044cc';\r\n    @observable lineColor = {\r\n        r: 50,\r\n        g: 150,\r\n        b: 255\r\n    };\r\n\r\n    // \r\n    @computed get outerRadiusInPixels () {\r\n       //return (canvasWidth / 2) - 20; \r\n    }\r\n\r\n    @observable innerRadiusInPixels = null;\r\n    @observable pointFromCenterInPixels = null;\r\n\r\n\r\n    // our constructor\r\n    constructor(store, params, id = uuid.v4()) {\r\n        this.store = store;\r\n        this.id = id;\r\n\r\n        _.each(Object.keys(params), (key) => {\r\n            this[key] = params[key];\r\n        });\r\n    }\r\n}\r\n\r\n\r\n// return a singleton store\r\nexport default new UIStateStore();\r\n"]}