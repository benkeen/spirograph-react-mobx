{"version":3,"sources":["../../src/js/utils.jsx"],"names":["getMaxLoops","innerRadiusInPixels","outerRadiusInPixels","console","log","getGreatestCommonDivisor","a","b","t","getOuterRadiusInPixels","canvasWidth","getInnerRadiusInPixels","innerCircleSizePercentage","parseInt","getPointFromCenterInPixels","pointFromCenterPercentage"],"mappings":";;;;;AAAA;;;;AAIA,IAAMA,cAAc,SAAdA,WAAc,CAACC,mBAAD,EAAsBC,mBAAtB,EAA8C;AACjEC,SAAQC,GAAR,CAAYH,mBAAZ,EAAiCC,mBAAjC;AACA,QAAO,CAAP;;AAED;AACC,CALD;;AAOA,IAAMG,2BAA2B,SAA3BA,wBAA2B,CAACC,CAAD,EAAIC,CAAJ,EAAU;AAC1C,KAAIC,CAAJ;AACA,QAAOD,KAAK,CAAZ,EAAe;AACdA,MAAID,KAAKE,IAAID,CAAT,CAAJ;AACAD,MAAIE,CAAJ;AACA;AACD,QAAOF,CAAP;AACA,CAPD;;AASA,IAAMG,yBAAyB,SAAzBA,sBAAyB,CAACC,WAAD,EAAiB;AAAE;AACjD,QAAQA,cAAc,CAAf,GAAoB,EAA3B;AACA,CAFD;;AAIA,IAAMC,yBAAyB,SAAzBA,sBAAyB,CAACT,mBAAD,EAAsBU,yBAAtB,EAAoD;AAClF,QAAOC,SAAUX,sBAAsB,GAAvB,GAA8BU,yBAAvC,EAAkE,EAAlE,CAAP;AACA,CAFD;;AAIA,IAAME,6BAA6B,SAA7BA,0BAA6B,CAACb,mBAAD,EAAsBc,yBAAtB,EAAoD;AACtF,QAAOF,SAAUZ,sBAAsB,GAAvB,GAA8Bc,yBAAvC,EAAkE,EAAlE,CAAP;AACA,CAFD;;AAIA;AACA;AACA;AACA;;;kBAGe;AACdf,yBADc;AAEdS,+CAFc;AAGdE,+CAHc;AAIdG,uDAJc;AAKdT;AALc,C","file":"utils.js","sourcesContent":["/**\r\n * General helper methods. Mostly needed by the spirograph component.\r\n */\r\n\r\nconst getMaxLoops = (innerRadiusInPixels, outerRadiusInPixels) => {\r\n\tconsole.log(innerRadiusInPixels, outerRadiusInPixels);\r\n\treturn 1;\r\n\r\n//\treturn innerRadiusInPixels / getGreatestCommonDivisor(outerRadiusInPixels, innerRadiusInPixels);\r\n}\r\n\r\nconst getGreatestCommonDivisor = (a, b) => {\r\n\tvar t;\r\n\twhile (b != 0) {\r\n\t\tb = a % (t = b);\r\n\t\ta = t;\r\n\t}\r\n\treturn a;\r\n}\r\n\r\nconst getOuterRadiusInPixels = (canvasWidth) => { // this.canvas.width\r\n\treturn (canvasWidth / 2) - 20;\r\n}\r\n\r\nconst getInnerRadiusInPixels = (outerRadiusInPixels, innerCircleSizePercentage) => {\r\n\treturn parseInt((outerRadiusInPixels / 100) * innerCircleSizePercentage, 10);\r\n}\r\n\r\nconst getPointFromCenterInPixels = (innerRadiusInPixels, pointFromCenterPercentage) => {\r\n\treturn parseInt((innerRadiusInPixels / 100) * pointFromCenterPercentage, 10);\r\n}\r\n\r\n// const getLineTransparency = () => {\r\n// \tvar lineTransparency = parseFloat($(this.$lineTransparency).val());\r\n// \treturn lineTransparency.toFixed(2);\r\n// }\r\n\r\n\r\nexport default {\r\n\tgetMaxLoops,\r\n\tgetOuterRadiusInPixels,\r\n\tgetInnerRadiusInPixels,\r\n\tgetPointFromCenterInPixels,\r\n\tgetGreatestCommonDivisor\r\n};"]}